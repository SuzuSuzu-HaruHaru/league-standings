{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Instantiation","text":"<p>A new league table can be created via</p> <p><pre><code>new LeagueTable(&lt;Object&gt;);\n</code></pre> where the input object must have the following compulsory key.</p>"},{"location":"#key-teams","title":"Key <code>teams</code>","text":"Description The list of the teams that are taking part in the league. Expected value An array of unique identifiers of any type, or an array of objects with keys <code>\"team\"</code> and <code>\"flags\"</code> where the values of the first keys are unique identifiers of any type, while the values of the second key are arrays of integers all of which have the same length that is equal to the length of <code>sorting.flags</code>. Compulsory Yes. <p>It is best if <code>teams</code> is an array of strings comprising of the (unique) names of the teams involved, but any other type of unique identifier works; repeated entries will throw an error of type</p> <p><pre><code>Team identifiers must be unique.\n</code></pre> Notice that explicitly submitting <code>sorting.flags</code> as a nonempty array will require <code>teams</code> to be an array of objects as opposed to an array of strings; this includes circumstances in which <code>sorting</code> is decided via a keyword (e.g. <code>\"FIFA World Cup\"</code>) that is defined in the code to have a nonempty <code>sorting.flags</code> array (see <code>sorting</code> down below for a list of the default kewords, as well as the flags associated with them).</p> <p>Additionally, the starting object may have any of the following optional keys.</p>"},{"location":"#optional-key-format","title":"Optional key <code>format</code>","text":"Description Whether the league is played as round-robin or home-and-away. Expected value Either the string <code>\"round-robin\"</code> or the string <code>\"home-and-away\"</code>. Compulsory No. Default <code>\"round-robin\"</code> <p>A <code>\"round-robin\"</code> league is one where the teams face each other only once; a <code>\"home-and-away\"</code> league is one in which teams face each other exactly twice (once at home and once away).</p>"},{"location":"#optional-key-points","title":"Optional key <code>points</code>","text":"Description How to calculate the points that teams get after every match. Expected value Either the string <code>\"standard\"</code> or the string <code>\"old\"</code>, or alternatively any function that accepts exactly three arguments (number of games won, number of games drawn, number of games lost). Compulsory No. Default <code>\"standard\"</code> <p>The <code>\"standard\"</code> points system corresponds to the current one used in football that awards three points for a win, one for a draw and none for a loss, whereas the <code>\"old\"</code> one is the one used by FIFA before 1994 that awarded only two points for a win, one for a draw and none for a loss.</p> <p>A function can also be passed as a value for <code>points</code></p> <p><pre><code>const table = new LeagueTable({\n    // ...\n    points: (w, d, l) =&gt; 3*w\n});\n</code></pre> where for example wins would still be worth three points here, but draws would not contribute anything.</p>"},{"location":"#optional-key-names","title":"Optional key <code>names</code>","text":"Description Specifies what terms are to be used when requiring a description of the ties. Expected value An object with either of the keys <code>points</code>, <code>diff</code>, <code>for</code>, <code>won</code>, <code>away_for</code>, <code>away_won</code>, <code>lots</code>, <code>alphabetical</code>, <code>h2h</code>, <code>overall</code>, each of which accepting a string as a value. Compulsory No. Default See below <p>If any of the keys in <code>names</code> are not specified, or if the whole key is absent, each unspecified term will default respectively to <code>\"points\"</code>, <code>\"goal difference\"</code>, <code>\"number of goals scored\"</code>, <code>\"number of games won\"</code>, <code>\"number of goals scored away from home\"</code>, <code>\"number of games won away from home\"</code>, <code>\"drawing of random lots\"</code>, <code>\"the alphabetical order of their names\"</code>, <code>\"head-to-head\"</code> and <code>\"overall\"</code>.</p> <p>For example, writing <code>names: { points: \"the amount of points earned\", lots: \"at random\" }</code> will have this effect when <code>.ties()</code> is called</p> <pre><code>messages: [\n    'Italy and Spain are tied on the amount of points earned (4).',\n    'Italy and Spain are sorted at random.'\n]\n</code></pre>"},{"location":"#optional-key-sorting","title":"Optional key <code>sorting</code>","text":"Description How the teams are to be sorted if they are even on points. Expected value Either a default string keyword or an object (See below) Compulsory No. Default See below <p>When wanting to initialize the <code>sorting</code> key to a preset corresponding to a real-world tournament, then the above accepts either the string <code>\"FIFA World Cup\"</code> (accepts a single flag: fair play points), the string <code>\"UEFA Euro\"</code> (accepts two flags: disciplinary points and European Qualifiers overall ranking), the string <code>\"pre-2021 UEFA Champions League\"</code> or the string <code>\"2021-2024 UEFA Champions League\"</code> (each accepting two flags: disciplinary points and UEFA club coefficient); leaving out this key during object creation will default it to the object</p> <p><pre><code>{\n    criteria: [\"diff\", \"for\", \"won\"],\n    h2h: {\n        when: \"before\",\n        span: \"all\"\n    },\n    additional: [],\n    shootout: false,\n    flags: [],\n    final: \"lots\"\n}\n</code></pre> In all other circumstances, <code>sorting</code> will accept an object with the following compulsory keys (see also the Tiebreakers and sorting options section from the <code>README.md</code> file over on Github for the practical explanation of the phenomena some of these keys model).</p>"},{"location":"#subkey-criteria","title":"Subkey <code>criteria</code>","text":"Description The list of criteria that will be applied one after the other to sort teams that are equal on points. Expected value An array containing any of the strings <code>\"diff\"</code>, <code>\"for\"</code>, <code>\"won\"</code>, <code>\"away_for\"</code>, <code>\"away_won\"</code>. Compulsory Yes if <code>sorting</code> is specified explicitly as an object. <p>The criteria correspond respectively to the goal difference, the number of goals scored, the number of games won, the number of goals scored away from home and the number of games won away from home.</p>"},{"location":"#subkey-h2h","title":"Subkey <code>h2h</code>","text":"Description Handles the head-to-head section of the sorting procedure. Expected value An object with keys <code>when</code> (accepting only either the string <code>\"before\"</code> or the string <code>\"after\"</code>) and <code>span</code> (accepting only either the string <code>\"all\"</code> the string <code>\"single\"</code>, or the string <code>\"none\"</code>). Compulsory Yes if <code>sorting</code> is specified explicitly as an object. <p>See Head-to-head v. overall and Head-to-head reapplication on Github for a pratical explanation of the real-world effects that these parameters have.</p>"},{"location":"#subkey-final","title":"Subkey <code>final</code>","text":"Description How to sort the teams after every other criterion has proven inconclusive. Expected value Either the string <code>\"lots\"</code> or the string <code>\"alphabetical\"</code>. Compulsory Yes if <code>sorting</code> is specified explicitly as an object. <p>The value <code>\"lots\"</code> indicates that the last criterion of all has to be a drawing of random lots, whereas <code>\"alphabetical\"</code> indicates that it should simply be the alphabetical order of their names.</p> <p>Additionally, the <code>sorting</code> key object may have any of the following optional subkeys.</p>"},{"location":"#optional-subkey-additional","title":"Optional subkey <code>additional</code>","text":"Description A list of criteria that has to be applied after both the overall and head-to-head ones have proven inconclusive. Expected value Same as with <code>criteria</code>. Compulsory No. Default [] (the empty array) <p>See also <code>additional</code> on Github.</p>"},{"location":"#optional-subkey-shootout","title":"Optional subkey <code>shootout</code>","text":"Description Whether the league uses the rule according to which, if the league is round-robin and exactly two teams are tied on points and they meet on the last matchday and their game is drawn, then their position in the league is decided via a penalty shoot-out that takes place at the end of that game. Expected value A boolean. Compulsory No. Default <code>false</code> <p>See also <code>shootout</code> on Github.</p>"},{"location":"#optional-subkey-flags","title":"Optional subkey <code>flags</code>","text":"Description Lets the user create flags, i.e. objects with a name and an ordering rule, that can be used to sort teams when all else fails right before sorting alphabetically or drawing lots. Expected value An array of obects with keys <code>name</code> (accepting a string) and <code>order</code> (accepting only either the string <code>\"asc\"</code> or the string <code>\"desc\"</code>). Compulsory No. Default [] (the empty array) <p>See also <code>flags</code> on Github.</p>"},{"location":"methods/","title":"Methods","text":""},{"location":"methods/#addmatches","title":"<code>addMatches</code>","text":"Description Adds the matches (and their results) from which the table is computed. Expected input An array of arrays of six elements each, the first of which has to be a unique identifier. Expected output None. <p>The six elements in each subarray (representing a single match) must be respectively a unique identifier for each match (any type is allowed, though an integer is preferred), an integer representing the matchday (starting from 1 for the first matchday), the unique team identifier of the home team, the unique team identifier of the away team, an integer representing the number of goals scored by the home team and an integer representing the number of goals scored by the away team. Submitting an array of matches where some of the match identifiers are repeated across the subarrays will throw an error of type</p> <pre><code>Match identifiers must be unique.\n</code></pre> <p>Submitting a list of matches where at least one of the teams plays more matches than the number of its opponents (in a round-robin league), or more than twice that number (in a home-and-away league), will throw either of the following non-blocking warnings</p> <p><pre><code>The total number of games played by a team in a round-robin format cannot be more than the number of teams minus one\n</code></pre> <pre><code>The total number of games played by a team in a home-and-away format cannot be more than twice the number of teams minus one\n</code></pre> followed by the first team identifier for which this check failed.</p> <p>Likewise, submitting a list of matches where at least one of the teams plays at least one of its opponents more than once (in a round-robin league), or more or less than twice (in a home-and-away league), will throw either of the following non-blocking warnings</p> <p><pre><code>In a round-robin format, teams must face each other exactly once\n</code></pre> <pre><code>In a home-and-away format, teams must face each other exactly twice\n</code></pre> followed by the team identifiers of the two teams for which this check first failed, followed in turn by the number of matches that have been found between them.</p> <p>Additionally, only in the case of a home-and-away league, the two matches between any two teams should be played one at the home of the first team, and the other at the home of the second team. Failing this check will throw the following non-blocking warning</p> <p><pre><code>In a home-and-away format, teams must face each other once at home and once away\n</code></pre> followed by the team identifiers of the two teams for which this check first failed.</p> <p>Finally, if <code>sorting.shootout</code> is set to <code>false</code>, submitting a list of matches where at least one team appears more than once in the same matchday will throw the following non-blocking warning</p> <p><pre><code>Each team may only appear exactly once per matchday.\n</code></pre> But if <code>sorting.shootout</code> is set to <code>true</code>, then matchdays become crucial to the sorting process and submitting a list of matches that fails that check will throw an error of type</p> <pre><code>Each team may only appear exactly once per matchday. Since sorting.shootout was set to true and that depends on matchdays, continuing may impact the final results; either switch to a sorting method that does not employ a shootout or fix the matchdays.\n</code></pre>"},{"location":"methods/#addshootout","title":"<code>addShootout</code>","text":"Description Tells the program how a required shootout ended, so it can be used to sort the teams involved. Expected input Four arguments (unique team identifier of one of the teams involved in the shootout, unique team identifier of the other team involved in the shootout, shootout results for the first team, shootout results for the second team). Expected output None. <p>See <code>shootout</code> on Github for an explanation on when this may occur, as well as <code>ties</code> down below for how to realize that the results for a shootout need to be provided.</p>"},{"location":"methods/#standings","title":"<code>standings</code>","text":"Description Retrieves the standings, as computed from the matches. Expected input Either none or the string <code>\"all\"</code>. Expected output An array of objects with keys <code>id</code>, <code>points</code>, <code>for</code>, <code>against</code>, <code>diff</code>, <code>won</code>, <code>drawn</code>, <code>lost</code>, <code>played</code> (additionally <code>away_for</code>, <code>away_won</code> and any other user-submitted flag if the input is set to <code>\"all\"</code>). <p>The array in question will already be ordered as per the final standings of the league; for example, calling <code>table.standings()[2].for</code> on an <code>table</code> object of type <code>LeagueTable</code> will retrieve the number of goals scored by the team that placed third in the league (as per usual, Javascript arrays are zero-indexed so the third element in the array is accessible via the index two).</p> <p>The keys represent the unique identifier of each team, the number of points earned, the number of goals scored, the nummber of goals against, the goal difference, the number of games won, the number of games drawn, the number of games lost, the total number of games played (additionally the number of goals scored away from home and the number of games won away from home). For displaying purposes, these values are always overall values that take into account the number of goals scored across all matches, the number of games won across all matches, and so on.</p>"},{"location":"methods/#ties","title":"<code>ties</code>","text":"Description Retrieves the text explanation of how the various ties have been resolved. Expected input Either none or the string <code>\"raw\"</code>. Expected output An array of objects with keys <code>group</code>, <code>messages</code> and <code>requests</code>, the first of which will be an array of unique team identifiers, the second will be an array of strings (each carrying a text description of a decisive tiebreaking step), and the third will either be <code>null</code> or the string <code>\"shootout\"</code>. If the input is <code>\"raw\"</code>, it will be an array of objects with keys <code>type</code>, <code>criterion</code>, <code>special</code> and <code>snapshot</code> (See below). <p>Calling <code>ties</code> with no parameters will return a list of objects that is ready to be used: mapping it to <code>messages</code> already gives a list of human-readable explanations for how the ties between the various teams have been broken. The <code>request</code> field will be <code>null</code> if there is nothing to note, but it will carry the string <code>\"shootout\"</code> if it is determined that two teams require a shootout to be sorted\u2014in which case this will have to be provided via <code>addShootout</code> before calling <code>standings</code> and <code>tied</code> again (the two teams involved will be in the <code>group</code> field of the same obect carrying the request for a shootout); in the meantime, the teams will be provisionally sorted at random and the <code>messages</code> in <code>ties</code> will say as much.</p>"},{"location":"methods/#updateflags","title":"<code>updateFlags</code>","text":"Description Updates custom flags related to teams. Expected input Three arguments (the unique team identifier of the team whose flag has to be updated, a string representing the <code>name</code> field of the flag that is to be updated, and the new integer value that has to be submitted for it). Expected output None. <p>See <code>flags</code> on Github for an explanation of what flags are, and when it is expected to update them.</p>"}]}